{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"API-endpoint-design/","title":"API Endpoint Design","text":"","tags":["CAP"]},{"location":"API-endpoint-design/#entity-relationships","title":"Entity Relationships","text":"","tags":["CAP"]},{"location":"API-endpoint-design/#database-schema-link","title":"Database Schema Link","text":"<ul> <li>Merchant and Store: One-to-One (Each merchant can create only one store using a single email).</li> <li>Customer and Order: One-to-Many (A customer can make multiple orders, but each order is associated with only one customer).</li> <li>Order and Payment: One-to-One (An order can have only one payment, and each payment corresponds to one order).</li> <li>Order and OrderItems: One-to-Many (An order can contain multiple order items, but each order item belongs to only one order).</li> <li>OrderItems and Product: One-to-One (An order item can have only one product, and each product can be associated with a single order item).</li> <li>Store and Order: One-to-Many (A store can have multiple orders, but each order is associated with only one store).</li> <li>Store and Product: One-to-Many (A store can post multiple products, but each product is associated with only one store).</li> </ul>","tags":["CAP"]},{"location":"API-endpoint-design/#functional-requirements","title":"Functional Requirements","text":"<p>Platform User Types: 1. Merchant (or Store Owner) 2. Customer</p>","tags":["CAP"]},{"location":"API-endpoint-design/#merchant-capabilities","title":"Merchant Capabilities","text":"<ul> <li>View the list of orders.</li> <li>Add new orders.</li> <li>Update order statuses.</li> <li>View products.</li> <li>Add products.</li> <li>Edit products.</li> <li>Update store details (name, description, image, dzongkhag, gewog, village).</li> <li>Ensure order details are updated when a user modifies order information.</li> </ul>","tags":["CAP"]},{"location":"API-endpoint-design/#customer-capabilities","title":"Customer Capabilities","text":"<ul> <li>View customer profile.</li> <li>View list of stores.</li> <li>View orders placed.</li> <li>View items in cart.</li> <li>Edit profile (name, image, phone number, location).</li> <li>Add new orders.</li> <li>Add items to cart.</li> <li>Edit existing orders.</li> </ul>","tags":["CAP"]},{"location":"API-endpoint-design/#api-endpoints","title":"API Endpoints","text":"","tags":["CAP"]},{"location":"API-endpoint-design/#endpoint-post-createmerchantstores","title":"Endpoint: <code>Post /create/merchant/stores</code>","text":"<ul> <li>User: Merchant</li> <li>Description: Create a new store with a unique identitiy <code>Store_id</code> as soon as a new merchnat with a unique identifier <code>merchnat_id</code> is been registered.</li> <li>Query Logic: Create a new record to the new merchant table with a unique <code>merchnat_id</code> and with same <code>merchnat_id</code>, create a new store to that respected merchant.</li> <li>Response:<ul> <li>200 OK: Returns a success Message with status code 200   index.ts<pre><code>{\n      \"merchant_id\": \"{merchant_id}\",\n      \"reault\":\n          {\n              \"Name\": name,\n              \"Email\": email,\n              \"Password\": password,\n              \"Dzongkhag\": dzongkhag,\n              \"Gewog\": gewog,\n              \"Village\": village\n          },\n      \"store_id\":\"{store_id}\",\n\n      \"data\":{\n          \"storeName\": storeName,\n          \"storeDescription\":storeDescription,\n          \"storeDzongkhag\":storeDzongkhag,\n          \"storeGewog\":storeGewog,\n          \"storeVillage\":storeVillage,\n          \"merchantId\":result.id\n          }\n}\n</code></pre></li> <li>404 Not Found: Returns person with the above email already exists.</li> </ul> </li> </ul>","tags":["CAP"]},{"location":"API-endpoint-design/#endpoint-post-storestore_idproducts","title":"Endpoint: <code>POST /store/{store_id}/products</code>","text":"<ul> <li>User: Merchant</li> <li>Description: Add a new product to the specified store.</li> <li>Query Logic: Adds a new product to the <code>products</code> table associated with <code>store_id</code>.</li> <li>Response:<ul> <li>200 OK: Successfully adds a new product with the provided details:   index.ts<pre><code>{\n    \"store_id\": \"{store_id}\",\n    \"product\": {\n        \"product_name\": product_name,\n        \"product_price\": product_price,\n        \"description\": description,\n        \"image_url\": image_url,\n        \"stock_quantity\": stock_quantity,\n        \"created_at\": created_at\n    }\n}\n</code></pre></li> <li>404 Not Found: Returns \"Store not found\" or \"Unable to add product\" if applicable.</li> </ul> </li> </ul>","tags":["CAP"]},{"location":"API-endpoint-design/#endpoint-get-storestore_idproductspagepage_numberlimitlimit","title":"Endpoint: <code>GET /store/{store_id}/products?page={page_number}&amp;limit={limit}</code>","text":"<ul> <li>User: Merchant</li> <li>Description: Retrieve a list of products equal to <code>limit</code> for the specific page of given <code>store_id</code>.</li> </ul>","tags":["CAP"]},{"location":"API-endpoint-design/#parameters","title":"Parameters","text":"<ul> <li>Path Parameter:<ul> <li><code>store_id</code>: Unique identifier for the store.</li> </ul> </li> <li>Query Parameters:<ul> <li><code>page</code>: Page number for pagination.</li> <li><code>limit</code>: Number of products to display per page.</li> </ul> </li> <li> <p>Query Logic: Queries the database for products associated with the specified <code>store_id</code>, applying pagination based on <code>page</code> and <code>limit</code>.  </p> </li> <li> <p>Response:</p> <ul> <li>200 OK: Returns a list of products with relevant details:   index.ts<pre><code>{\n    \"store_id\": \"{store_id}\",\n    \"page\": \"{page_number}\",\n    \"limit\": \"{limit}\",\n    \"total_products\": products.length,\n    \"products\": [\n        {\n            \"productName\": true,\n            \"productPrice\": true,\n            \"stock_quantity\": true,\n            \"description\": true,\n            \"image_url\": true,\n        }\n    ]\n}\n</code></pre></li> <li>404 Not Found: Returns \"Products not found\" or \"No products found for the given store\" if applicable.</li> </ul> </li> </ul>","tags":["CAP"]},{"location":"API-endpoint-design/#endpoint-patch-storestore_id","title":"Endpoint: <code>PATCH /store/{store_id}</code>","text":"<ul> <li>User: Merchant</li> <li>Description: Update store details for a specific store with the given <code>store_id</code>.</li> <li>Query Logic: Updates the specified fields (name, description, image, dzongkhag, gewog, village) for the given <code>store_id</code>.</li> <li>Response:<ul> <li>200 OK: Successfully updates the store details:   index.ts<pre><code>{\n    \"store_id\": \"{store_id}\",\n    \"updated_fields\": {\n          \"stoteName\": \"Updated Store Name\",\n          \"storeDescription\": \"Updated Description\",\n          \"image\": \"image_url\",\n          \"storeDzongkhag\": \"updated_dzongkhag\",\n          \"storeGewog\": \"updated_gewog\",\n          \"storeVillage\": \"updated_village\"\n          \"updated_at\": new Date()\n    }\n}\n</code></pre></li> <li>404 Not Found: Returns \"Store not found.\"</li> </ul> </li> </ul>","tags":["CAP"]},{"location":"API-endpoint-design/#endpoint-get-getcustomercustomer_id","title":"Endpoint: <code>GET /get/customer/{customer_id}</code>","text":"<ul> <li>User: Customer</li> <li>Description: Retrieve profile information for a specific customer.</li> <li>Query Logic: Retrieves customer details for the given <code>customer_id</code>.</li> <li>Response:<ul> <li>200 OK: Returns customer profile details:   index.ts<pre><code>{\n    \"customer_id\": \"{customer_id}\",\n    \"profile\": {\n          \"name\": \"Customer Name\",\n          \"image\": \"image_url\",\n          \"phone_number\": \"phone_number\",\n          \"dzongkhag\": \"dzongkhag\",\n          \"gewog\": \"gewog\",\n          \"village\": \"village\"\n    }\n}\n</code></pre></li> <li>404 Not Found: Returns \"Customer not found.\"</li> </ul> </li> </ul>","tags":["CAP"]},{"location":"API-endpoint-design/#endpoint-get-storespagepage_numberlimitlimit","title":"Endpoint: <code>GET /stores?page={page_number}&amp;limit={limit}</code>","text":"<ul> <li>User: Customer</li> <li>Description: Retrieve a list of all available stores.</li> </ul>","tags":["CAP"]},{"location":"API-endpoint-design/#parameters_1","title":"Parameters","text":"<ul> <li>Path Parameter:<ul> <li><code>store_id</code>: Unique identifier for the store.</li> </ul> </li> <li>Query Parameters:<ul> <li><code>page</code>: Page number for pagination.</li> <li><code>limit</code>: Number of orders to display per page.</li> </ul> </li> <li>Query Logic: Retrieves all stores with basic details.</li> <li>Response:<ul> <li>200 OK: Returns a list of stores:   index.ts<pre><code>{\n    \"stores\": [\n        {\n            \"store_id\": \"store_id_1\",\n            \"name\": \"Store Name\",\n            \"description\": \"Store Description\",\n            \"image\": \"image_url\",\n            \"dzongkhag\": \"dzongkhag\",\n            \"gewog\": \"gewog\",\n            \"village\": \"village\"\n\n        }\n    ]\n}\n</code></pre></li> </ul> </li> </ul>","tags":["CAP"]},{"location":"API-endpoint-design/#endpoint-post-createcustomer","title":"Endpoint: <code>POST  /create/customer</code>","text":"<ul> <li>User: Customer</li> <li>Description: Create a new custmer with a unique identifier <code>customer_id</code>.</li> <li>Query Logic: Query the database to check whether the provide email exist or not. If not, create a new customer.</li> <li>Response:<ul> <li>200 OK: Customer created succesfully created.   index.ts<pre><code>  {\n    \"data\": \n        {\n          \"name\":name,\n          \"email\":email,\n          \"phoneNumber\":phoneNumber,\n          \"dzongkhag\":dzongkhag,\n          \"gewog\":gewog,\n          \"village\":village\n        }\n  }\n</code></pre></li> <li>404 Not Found: Returns a message <code>Customer with the email already exist</code></li> </ul> </li> </ul>","tags":["CAP"]},{"location":"API-endpoint-design/#endpoint-get-getcustomercustomer_id_1","title":"Endpoint: <code>GET  get/customer/{customer_id}</code>","text":"<ul> <li>User: Customer</li> <li>Description: Retrieve customer profile data.</li> <li>Query Logic: Query the database to retrive the profile data of a particular customer with <code>customer_id</code>.</li> <li>Response:<ul> <li>200 OK: Returns customer profile data   index.ts<pre><code>  {\n    \"data\": \n        {\n          \"name\":true,\n          \"email\":true,\n          \"phoneNumber\":true,\n          \"dzongkhag\":true,\n          \"gewog\":true,\n          \"village\":true\n        }\n  }\n</code></pre></li> <li>404 Not Found: Returns a message <code>Invalid customer_id</code></li> </ul> </li> </ul>","tags":["CAP"]},{"location":"API-endpoint-design/#endpoint-patch-customercustomer_id","title":"Endpoint: <code>PATCH /customer/{customer_id}</code>","text":"<ul> <li>User: Customer</li> <li>Description: Edit profile information for a specific customer.</li> <li>Query Logic: Updates fields (name, image, phone number, location) for the given <code>customer_id</code>.</li> <li>Response:<ul> <li>200 OK: Successfully updates profile details:   index.ts<pre><code>{\n    \"customer_id\": \"{customer_id}\",\n    \"updated_profile\": {\n        \"name\": \"Updated Name\",\n        \"image\": \"image_url\",\n        \"phone_number\": \"phone_number\",\n        \"dzongkhag\": \"dzongkhag\",\n        \"gewog\": \"gewog\",\n        \"village\": \"village\"\n        \"updated_at\": new Date()\n    }\n}\n</code></pre></li> <li>404 Not Found: Returns \"Customer not found.\"</li> </ul> </li> </ul>","tags":["CAP"]},{"location":"API-endpoint-design/#endpoint-post-storesstore_idcustomercustomer_idorders","title":"Endpoint: <code>POST /stores/{store_id}/customer/{customer_id}/orders</code>","text":"<ul> <li>User: Customers</li> <li>Description: Place order to a specific store and add all the <code>order_item</code> to the order_item table.</li> <li>Query Logic: Adds a new order for the specified <code>customer_id</code> with order details and add all the order_items to the order_items table</li> <li>Response:<ul> <li>200 OK: Successfully places a new order:   index.ts<pre><code>{\n    \"store_id\": \"{store_id}\",\n    \"order\": {\n      \"fulfillmentDate\": \"body.fulfillmentDate\",\n      \"totalAmount\": body.totalAmount,\n      \"addressDescription\": body.addressDescription,\n      \"dzongkhag\": body.dzongkhag,\n      \"gewog\": body.gewog,\n      \"village\": body.village,\n      \"latitude\": 27.12345,\n      \"longitude\": 89.12345,\n      \"phoneNumber\": \"1234567890\",\n      \"orderItems\":[\n          {\n              \"quantity\": 2,\n              \"productId\": 101,\n              \"unitPrice\": 100\n          },\n          {\n              \"quantity\": 1,\n              \"productId\": 102,\n              \"unitPrice\": 200\n          }\n      ]\n    }\n}\n</code></pre></li> <li>400 Bad Request: Returns <code>Product with ID productId not found</code></li> </ul> </li> </ul>","tags":["CAP"]},{"location":"API-endpoint-design/#endpoint-get-storestore_idorderspagepage_numberlimitlimit","title":"Endpoint: <code>GET /store/{store_id}/orders?page={page_number}&amp;limit={limit}</code>","text":"<ul> <li>User: Merchant</li> <li>Description: Retrieve orders placed by customers at a specific store.</li> </ul>","tags":["CAP"]},{"location":"API-endpoint-design/#parameters_2","title":"Parameters","text":"<ul> <li>Path Parameter:<ul> <li><code>store_id</code>: Unique identifier for the store.</li> </ul> </li> <li>Query Parameters:<ul> <li><code>page</code>: Page number for pagination.</li> <li><code>limit</code>: Number of orders to display per page.</li> </ul> </li> <li>Query Logic: Query the database for orders associated with the specified <code>store_id</code>.</li> <li>Response:<ul> <li>200 OK: Returns a list of orders with relevant details:   index.ts<pre><code>{\n    \"store_id\": \"{store_id}\",\n    \"page\": \"{page_number}\",\n    \"limit\": \"{limit}\",\n    \"total_orders\": orders.length,\n    \"orders\": [\n        {\n            \"customer_name\": true,\n            \"total_amount\": true,\n            \"items\": true,\n            \"order_date\": true,\n            \"fulfillment_date\": true,\n            \"status\": true,\n            \"location\": true,\n            \"location_description\": true,\n            \"phone_number\": true\n        }\n    ]\n}\n</code></pre></li> <li>404 Not Found: Returns \"Store not found\" or \"No orders found for store\" if applicable.</li> </ul> </li> </ul>","tags":["CAP"]},{"location":"API-endpoint-design/#endpoint-post-storestore_idorders","title":"Endpoint: <code>POST /store/{store_id}/orders</code>","text":"<ul> <li>User: Merchant</li> <li>Description: Add a new order manually by the store owner.</li> <li>Query Logic: Inserts a new order record for the specified <code>store_id</code>.</li> <li>Response:<ul> <li>200 OK: Creates a new order with the following details:   index.ts<pre><code>{\n    \"store_id\": \"{store_id}\",\n    \"order\": {\n      \"fulfillmentDate\": \"body.fulfillmentDate\",\n      \"totalAmount\": body.totalAmount,\n      \"addressDescription\": body.addressDescription,\n      \"dzongkhag\": body.dzongkhag,\n      \"gewog\": body.gewog,\n      \"village\": body.village,\n      \"latitude\": 27.12345,\n      \"longitude\": 89.12345,\n      \"phoneNumber\": \"1234567890\",\n      \"orderItems\":[\n          {\n              \"quantity\": 2,\n              \"productId\": 101\n          },\n          {\n              \"quantity\": 1,\n              \"productId\": 102\n          }\n      ]\n    }\n}\n</code></pre></li> <li>400 Bad Request: Returns \"Incomplete order details, please provide complete information.\"</li> </ul> </li> </ul>","tags":["CAP"]},{"location":"API-endpoint-design/#endpoint-patch-storestore_idordersorder_id","title":"Endpoint: <code>PATCH /store/{store_id}/orders/{order_id}</code>","text":"<ul> <li>User: Merchant</li> <li>Description: Update the status of a specific order when delivery is completed.</li> <li>Query Logic: Updates the order status for the specified <code>order_id</code> under <code>store_id</code>.</li> <li>Response:<ul> <li>200 OK: Successfully updates the order status to <code>Delivered</code> for <code>order_id</code>:   index.ts<pre><code>{\n    \"order_id\": \"{order_id}\",\n    \"status\": 1\n}\n</code></pre></li> <li>404 Not Found: Returns \"Order not found.\"</li> </ul> </li> </ul>","tags":["CAP"]},{"location":"API-endpoint-design/#endpoint-get-getorderscustomercustomer_id","title":"Endpoint: <code>GET /get/orders/customer/{customer_id}</code>","text":"<ul> <li>User: Customer</li> <li>Description: Retrieve order list of a specific customer with <code>cusaomer_id</code>.</li> <li>Query Logic: Query the database to get the order list of a specific customer with <code>customer_id</code>.</li> <li>Response:<ul> <li>200 OK: Returns a list of orders placed by a specific customer   index.ts<pre><code>{\n    \"customer_id\": \"{customer_id}\",\n    \"orders\": [\n        {\n            \"customer_name\": true,\n            \"total_amount\": true,\n            \"items\": true,\n            \"order_date\": true,\n            \"fulfillment_date\": true,\n            \"status\": true,\n            \"location\": true,\n            \"location_description\": true,\n            \"phone_number\": true\n        }\n    ]\n}\n</code></pre></li> <li>404 Not Found: Returns \"Store not found\" or \"No orders found for store\" if applicable.</li> </ul> </li> </ul>","tags":["CAP"]},{"location":"API_ENDPOIT_GHS/","title":"API Endpoint Design for GeoHazardSystem","text":""},{"location":"API_ENDPOIT_GHS/#1-master-data-management","title":"1. Master Data Management","text":""},{"location":"API_ENDPOIT_GHS/#endpoint-post-createrecordadminid","title":"ENDPOINT: <code>POST /create/record/:adminID</code>","text":"<ul> <li> <p>Description: Create a new record.</p> </li> <li> <p>Query Logic: Retrieve the path parameter <code>adminID</code> and check the <code>user role</code>. Based on the user role and permissions, allow the user to perform the task.</p> </li> <li> <p>Response:</p> <ul> <li>200 OK: New record created. index.py<pre><code>{\n    \"adminID\": \"adminID\",\n    \"data\": {\n        \"Code\": \"Code\",\n        \"Name\": \"Name\",\n        \"Description\": \"Description\",\n        \"recordStatus\": 1\n    }\n}\n</code></pre></li> <li>404 Not Found: Missing required fields.</li> <li>409 Conflict: Unique <code>Code</code> and <code>Name</code> already exist.</li> </ul> </li> </ul>"},{"location":"API_ENDPOIT_GHS/#endpoint-patch-updatedatarecordsadminidid","title":"ENDPOINT: <code>PATCH /update/dataRecords/:adminID/:id</code>","text":"<ul> <li> <p>Description: Update existing records.</p> </li> <li> <p>Query Logic: Check the <code>adminID</code>. If valid, allow the admin to update the existing record based on a unique identifier like <code>Code</code> or <code>Name</code>.</p> </li> <li> <p>Response:</p> <ul> <li>200 OK: Record updated with the unique identifier <code>Code</code> or <code>Name</code>. index.py<pre><code>{\n    \"adminID\": \"adminID\",\n    \"recordID\": \"id\",\n    \"data\": {\n        \"Code\": \"Code\",\n        \"Name\": \"Name\",\n        \"Description\": \"Description\",\n        \"recordStatus\": 1\n    }\n}\n</code></pre></li> <li>404 Not Found: Missing required field <code>id</code>.</li> </ul> </li> </ul>"},{"location":"API_ENDPOIT_GHS/#endpoint-patch-updateactivestatusadminidid","title":"ENDPOINT: <code>PATCH /update/activeStatus/:adminID/:id</code>","text":"<ul> <li> <p>Description: Update the <code>recordStatus</code> to <code>0</code>, indicating deactivation or archiving.</p> </li> <li> <p>Query Logic: Check the <code>adminID</code>. If authorized, find the specific data record with <code>id</code> and update the record.</p> </li> <li> <p>Response:</p> <ul> <li>200 OK: Data with the <code>id</code> successfully updated. index.py<pre><code>{\n    \"adminID\": \"adminID\",\n    \"recordID\": \"id\",\n    \"data\": {\n        \"Code\": \"Code\",\n        \"Name\": \"Name\",\n        \"Description\": \"Description\",\n        \"recordStatus\": 0\n    }\n}\n</code></pre></li> <li>404 Not Found: Requested data with <code>recordID</code> does not exist.</li> </ul> </li> </ul>"},{"location":"API_ENDPOIT_GHS/#2-intensity-scale","title":"2. Intensity Scale","text":""},{"location":"API_ENDPOIT_GHS/#endpoint-post-createintensityscalerecords","title":"ENDPOINT: <code>POST /create/intensityScale/records</code>","text":"<ul> <li> <p>Description: Create a new intensity scale with a unique identifier <code>Code</code>.</p> </li> <li> <p>Query Logic: Check the <code>adminID</code>. If authorized, create a new intensity record with a unique identifier <code>intensityScale</code>.</p> </li> <li> <p>Response:</p> <ul> <li>200 OK: Successfully created a new intensity scale record. index.py<pre><code>{\n    \"adminID\": \"adminID\",\n    \"data\": {\n        \"Code\": \"Code\",\n        \"IntensityScale\": \"Intensity Scale\",\n        \"DamageDescription\": \"Damage Description\"\n    }\n}\n</code></pre></li> <li>404 Not Found: Missing required fields.</li> <li>409 Conflict: Unique <code>Code</code> already exists.</li> </ul> </li> </ul>"},{"location":"API_ENDPOIT_GHS/#3-survey-questionnaire","title":"3. Survey Questionnaire","text":""},{"location":"API_ENDPOIT_GHS/#endpoint-post-createquestionnaireadminid","title":"ENDPOINT: <code>POST /create/questionnaire/:adminID</code>","text":"<ul> <li> <p>Description: API endpoint for creating a new questionnaire by the admin.</p> </li> <li> <p>Query Logic: Check the <code>adminID</code>. If authorized, allow the admin to create a new question.</p> </li> <li> <p>Response:</p> <ul> <li>200 OK: Successfully created a new question. index.py<pre><code>{\n    \"adminID\": \"adminID\",\n    \"data\": {\n        \"Code\": \"Code\",\n        \"Question\": \"Question\",\n        \"AnswerType\": \"AnswerType\",\n        \"Answer\": \"Answer\",\n        \"Remarks\": \"Remarks\"\n    }\n}\n</code></pre></li> <li>404 Not Found: Missing required fields.</li> <li>409 Conflict: Unique <code>Code</code> already exists.</li> </ul> </li> </ul>"},{"location":"API_ENDPOIT_GHS/#endpoint-get-questionnairelistuseridpagepagenumberlimitlimit","title":"ENDPOINT: <code>GET /questionnaire/list/:userID?page={pageNumber}&amp;limit={limit}</code>","text":"<ul> <li> <p>Description: Paginated API endpoint for retrieving all the questionnaires.</p> </li> <li> <p>Query Logic: Query the database to get all the questions.</p> </li> <li> <p>Response:</p> <ul> <li>200 OK: Successfully retrieved all <code>limit</code> data from <code>offset</code>. index.py<pre><code>{\n    \"userID\": \"userID\",\n    \"pageNumber\": \"pageNumber\",\n    \"limit\": \"limit\",\n    \"questionList\": {\n        \"Code\": \"Code\",\n        \"Question\": \"Question\",\n        \"AnswerType\": \"AnswerType\",\n        \"Answer\": \"Answer\",\n        \"Remarks\": \"Remarks\"\n    }\n}\n</code></pre></li> <li>404 Not Found: Bad request.</li> <li>409 Conflict: User <code>userID</code> not authorized.</li> </ul> </li> </ul>"},{"location":"API_ENDPOIT_GHS/#endpoint-patch-updatequestionnaireiduserid","title":"ENDPOINT: <code>PATCH /update/questionnaire/:id/:userID</code>","text":"<ul> <li> <p>Description: Update the existing questionnaire with corresponding answers.</p> </li> <li> <p>Query Logic: Check the <code>userID</code>. If authorized, allow the user to update the questionnaire with relevant answers.</p> </li> <li> <p>Response:</p> <ul> <li>200 OK: Successfully answered the questionnaire with <code>id</code>. index.py<pre><code>{\n    \"userID\": \"userID\",\n    \"questionID\": \"id\",\n    \"questionList\": {\n        \"AnswerType\": \"AnswerType\",\n        \"Answer\": \"Answer\",\n        \"Remarks\": \"Remarks\"\n    }\n}\n</code></pre></li> <li>404 Not Found: Missing required field.</li> <li>409 Conflict: Question with the unique identifier <code>id</code> does not exist.</li> </ul> </li> </ul> <p>## 4. Notification Rules</p>"},{"location":"API_ENDPOIT_GHS/#endpoint-post-createrulesadminid","title":"ENDPOINT: <code>POST /create/rules/:adminID</code>","text":"<ul> <li>Description: Create new rules for sending notifications.</li> <li>Query Logic: Verify the <code>adminID</code>. If authorized, allow the admin to create a new rule.</li> <li>Response:</li> <li>200 OK: Successfully created a rule with ID <code>ruleID</code>.     <pre><code>{\n    \"adminID\": \"adminID\",\n    \"data\": {\n        \"MeasurementType\": \"MeasurementType\",\n        \"Value\": \"Value\",\n        \"Notification\": \"Notification\"\n    }\n}\n</code></pre></li> <li>404 Not Found: Missing required fields.</li> <li>409 Conflict: Admin with <code>adminID</code> is not authorized to create a rule.</li> </ul>"},{"location":"API_ENDPOIT_GHS/#endpoint-patch-updaterulesadminidid","title":"ENDPOINT: <code>PATCH /update/rules/:adminID/:id</code>","text":"<ul> <li>Description: Update existing rules.</li> <li>Query Logic: Verify the <code>adminID</code>. If authorized, allow the admin to update the rule with <code>id</code>.</li> <li>Response:</li> <li>200 OK: Successfully updated the rule with ID <code>ruleID</code>.     <pre><code>{\n    \"adminID\": \"adminID\",\n    \"ruleID\": \"id\",\n    \"data\": {\n        \"MeasurementType\": \"MeasurementType\",\n        \"Value\": \"Value\",\n        \"Notification\": \"Notification\"\n    }\n}\n</code></pre></li> <li>404 Not Found: Rule with <code>ruleID</code> does not exist.</li> <li>409 Conflict: Admin with <code>adminID</code> is not authorized to update the rule.</li> </ul>"},{"location":"API_ENDPOIT_GHS/#endpoint-delete-deleterulesadminidid","title":"ENDPOINT: <code>DELETE /delete/rules/:adminID/:id</code>","text":"<ul> <li>Description: Delete an existing rule with a given ID.</li> <li>Query Logic: Verify the <code>adminID</code>. If authorized, allow the admin to delete the rule with <code>ruleID</code>.</li> <li>Response:</li> <li>200 OK: Successfully deleted the rule with ID <code>ruleID</code>.     <pre><code>{\n    \"adminID\": \"adminID\",\n    \"ruleID\": \"id\"\n}\n</code></pre></li> <li>404 Not Found: Rule with <code>ruleID</code> does not exist.</li> <li>409 Conflict: Admin with <code>adminID</code> is not authorized to delete the rule.</li> </ul>"},{"location":"API_ENDPOIT_GHS/#endpoint-post-sendnotificationadminid","title":"ENDPOINT: <code>POST /send/notification/:adminID</code>","text":"<ul> <li>Description: Send notifications if the intensity level exceeds the value provided in the rules.</li> <li>Query Logic: Verify the <code>adminID</code>. If authorized, allow the admin to send notifications to the respective stakeholders.</li> <li>Response:</li> <li>200 OK: Successfully delivered the notification.     <pre><code>{\n    \"adminID\": \"adminID\",\n    \"recipients\": [\"17828281\", \"77267272\", \"17282828\"],\n    \"data\": {\n        \"type\": \"SMS\",\n        \"title\": \"Hazard Alarm\",\n        \"Notification\": \"Notification\"\n    }\n}\n</code></pre></li> <li>404 Not Found: Missing required fields.</li> <li>409 Conflict: Admin with <code>adminID</code> is not authorized to send notifications.</li> </ul>"},{"location":"API_ENDPOIT_GHS/#5-felt-report","title":"5. Felt Report","text":""},{"location":"API_ENDPOIT_GHS/#endpoint-post-createsurveyquestionadminid","title":"ENDPOINT: <code>POST /create/surveyQuestion/:adminID</code>","text":"<ul> <li>Description: Create \"felt like report\" questions for the public.</li> <li>Query Logic: Verify the <code>adminID</code>. If authorized, allow the admin to create new questions.</li> <li>Response:</li> <li>200 OK: Successfully created a new question for the \"felt like report\".     <pre><code>{\n    \"adminID\": \"adminID\",\n    \"data\": {\n        \"Question\": \"Question\",\n        \"Options\": \"Options\",\n        \"Remarks\": \"Remarks\"\n    }\n}\n</code></pre></li> <li>404 Not Found: Missing required fields.</li> <li>409 Conflict: Unique code <code>Code</code> already exists.</li> </ul>"},{"location":"API_ENDPOIT_GHS/#endpoint-get-feltreportlistpagepagenumberlimitlimit","title":"ENDPOINT: <code>GET /feltReport/list?page={pageNumber}&amp;limit={limit}</code>","text":"<ul> <li>Description: Paginated API endpoint for retrieving all the questions for the \"felt like report\".</li> <li>Query Logic: Query the database to get all the questions.</li> <li>Response:</li> <li>200 OK: Successfully retrieved <code>limit</code> data from <code>offset</code>.     <pre><code>{\n    \"pageNumber\": \"pageNumber\",\n    \"limit\": \"limit\",\n    \"feltLikeReport\": [\n        {\n            \"Question\": \"Question\",\n            \"Options\": \"Options\",\n            \"Remarks\": \"Remarks\"\n        }\n    ]\n}\n</code></pre></li> <li>404 Not Found: Bad request.</li> </ul>"},{"location":"API_ENDPOIT_GHS/#endpoint-patch-updatefeltreportid","title":"ENDPOINT: <code>PATCH /update/feltReport/:id</code>","text":"<ul> <li>Description: Update the existing \"felt like report\" with the corresponding answer.</li> <li>Query Logic: Update the answer to the corresponding question with the given question ID <code>id</code>.</li> <li>Response:</li> <li>200 OK: Successfully answered the questionnaire with ID <code>id</code>.     <pre><code>{\n    \"questionID\": \"id\",\n    \"feltLikeReport\": {\n        \"Options\": \"Options\",\n        \"Remarks\": \"Remarks\"\n    }\n}\n</code></pre></li> <li>404 Not Found: Missing required fields.</li> <li>409 Conflict: Question with the unique identifier <code>id</code> does not exist.</li> </ul>"},{"location":"API_ENDPOIT_GHS/#6-sms-stakeholders","title":"6. SMS Stakeholders","text":""},{"location":"API_ENDPOIT_GHS/#endpoint-post-createstakeholdersadminid","title":"ENDPOINT: <code>POST /create/stakeholders/:adminID</code>","text":"<ul> <li>Description: Create new stakeholders.</li> <li>Query Logic: Verify the <code>adminID</code>. If authorized, allow the admin to create new stakeholders with a valid phone number.</li> <li>Response:</li> <li>200 OK: Successfully created a stakeholder with the phone number <code>TelephoneNo</code>.     <pre><code>{\n    \"adminID\": \"adminID\",\n    \"data\": {\n        \"Name\": \"Name\",\n        \"TelephoneNo\": \"TelephoneNo\",\n        \"Description\": \"Description\"\n    }\n}\n</code></pre></li> <li>404 Not Found: Missing required fields.</li> <li>409 Conflict: Phone number <code>TelephoneNo</code> already exists.</li> </ul>"},{"location":"API_ENDPOIT_GHS/#endpoint-patch-updatestakeholdersuserid","title":"ENDPOINT: <code>PATCH /update/stakeholders/:userID</code>","text":"<ul> <li>Description: Update the details of the stakeholder.</li> <li>Query Logic: Verify the <code>userID</code>. If authorized, allow the stakeholder to update their information.</li> <li>Response:</li> <li>200 OK: Successfully updated the stakeholder information.     <pre><code>{\n    \"userID\": \"userID\",\n    \"data\": {\n        \"Name\": \"Name\",\n        \"TelephoneNo\": \"TelephoneNo\",\n        \"Description\": \"Description\"\n    }\n}\n</code></pre></li> <li>404 Not Found: Invalid phone number <code>TelephoneNo</code>.</li> <li>409 Conflict: Phone number <code>TelephoneNo</code> already exists.</li> </ul>"},{"location":"API_ENDPOIT_GHS/#endpoint-delete-deletestakeholdersadminid","title":"ENDPOINT: <code>DELETE /delete/stakeholders/:adminID</code>","text":"<ul> <li>Description: Delete the details of a stakeholder.</li> <li>Query Logic: Verify the <code>adminID</code>. If authorized, allow the admin to delete the stakeholder.</li> <li>Response:</li> <li>200 OK: Successfully deleted the stakeholder <code>Name</code>.     <pre><code>{\n    \"adminID\": \"adminID\",\n    \"data\": {\n        \"Name\": \"Name\",\n        \"TelephoneNo\": \"TelephoneNo\",\n        \"Description\": \"Description\"\n    }\n}\n</code></pre></li> <li>404 Not Found: Invalid phone number <code>TelephoneNo</code>.</li> <li>409 Conflict: Phone number <code>TelephoneNo</code> already exists.</li> </ul>"},{"location":"API_ENDPOIT_GHS/#7-earthquake-notification","title":"7. Earthquake Notification","text":""},{"location":"API_ENDPOIT_GHS/#endpoint-post-sendnotificationpublicadminid","title":"ENDPOINT: <code>POST /send/notification/public/:adminID</code>","text":"<ul> <li>Description: Send a notification to the public when the input field <code>SMS To</code> is set to <code>true</code>.</li> <li>Query Logic: Check the <code>adminID</code>. If authorized, allow the admin to send notifications to the public.</li> <li>Response:</li> <li>200 OK: Successfully delivered SMS to the general public.     <pre><code>{\n    \"adminID\": \"adminID\",\n    \"data\": {\n        \"smsTo\": true,\n        \"Message\": \"Message\"\n    }\n}\n</code></pre></li> <li>404 Not Found: Missing required fields.</li> <li>409 Conflict: Admin with the <code>adminID</code> is not authorized to send notifications.</li> </ul>"},{"location":"API_ENDPOIT_GHS/#endpoint-post-sendnotificationstakeholdersadminid","title":"ENDPOINT: <code>POST /send/notification/stakeholders/:adminID</code>","text":"<ul> <li>Description: Send a notification to all stakeholders when the input field <code>SMS To</code> is set to <code>true</code>.</li> <li>Query Logic: Check the <code>adminID</code>. If authorized, allow the admin to send notifications to all stakeholders.</li> <li>Response:</li> <li>200 OK: Successfully delivered SMS to all stakeholders.     <pre><code>{\n    \"adminID\": \"adminID\",\n    \"data\": {\n        \"smsTo\": true,\n        \"Message\": \"Message\"\n    }\n}\n</code></pre></li> <li>404 Not Found: Missing required fields.</li> <li>409 Conflict: Admin with the <code>adminID</code> is not authorized to send notifications.</li> </ul>"},{"location":"API_ENDPOIT_GHS/#8-landslide-inventory","title":"8. Landslide Inventory","text":""},{"location":"API_ENDPOIT_GHS/#endpoint-post-createlandsliderecordadminid","title":"ENDPOINT: <code>POST /create/landslide/record/:adminID</code>","text":"<ul> <li>Description: Create a new landslide inventory record.</li> <li>Query Logic: Verify the <code>adminID</code>. If authorized, allow the admin to create a new landslide record.</li> <li>Response:</li> <li>200 OK: Successfully created a new landslide inventory record.     <pre><code>{\n    \"adminID\": \"adminID\",\n    \"data\": {\n        \"Location\": \"Location\",\n        \"Date\": \"Date\",\n        \"Description\": \"Description\",\n        \"Severity\": \"Severity\"\n    }\n}\n</code></pre></li> <li>404 Not Found: Missing required fields.</li> <li>409 Conflict: Admin with the <code>adminID</code> is not authorized to create records.</li> </ul>"},{"location":"API_ENDPOIT_GHS/#endpoint-get-landsliderecordspagepagenumberlimitlimit","title":"ENDPOINT: <code>GET /landslide/records?page={pageNumber}&amp;limit={limit}</code>","text":"<ul> <li>Description: Retrieve paginated landslide records.</li> <li>Query Logic: Fetch all records and return results based on the <code>pageNumber</code> and <code>limit</code>.</li> <li>Response:</li> <li>200 OK: Successfully retrieved records.     <pre><code>{\n    \"pageNumber\": \"pageNumber\",\n    \"limit\": \"limit\",\n    \"records\": [\n        {\n            \"Location\": \"Location\",\n            \"Date\": \"Date\",\n            \"Description\": \"Description\",\n            \"Severity\": \"Severity\"\n        }\n    ]\n}\n</code></pre></li> <li>404 Not Found: No records found.</li> </ul>"},{"location":"API_ENDPOIT_GHS/#endpoint-patch-updatelandsliderecordadminidrecordid","title":"ENDPOINT: <code>PATCH /update/landslide/record/:adminID/:recordID</code>","text":"<ul> <li>Description: Update an existing landslide inventory record.</li> <li>Query Logic: Verify the <code>adminID</code>. If authorized, allow the admin to update the record with <code>recordID</code>.</li> <li>Response:</li> <li>200 OK: Successfully updated the record.     <pre><code>{\n    \"adminID\": \"adminID\",\n    \"recordID\": \"recordID\",\n    \"data\": {\n        \"Location\": \"Updated Location\",\n        \"Date\": \"Updated Date\",\n        \"Description\": \"Updated Description\",\n        \"Severity\": \"Updated Severity\"\n    }\n}\n</code></pre></li> <li>404 Not Found: Record with <code>recordID</code> does not exist.</li> <li>409 Conflict: Admin with the <code>adminID</code> is not authorized to update records.</li> </ul>"},{"location":"API_ENDPOIT_GHS/#endpoint-delete-deletelandsliderecordadminidrecordid","title":"ENDPOINT: <code>DELETE /delete/landslide/record/:adminID/:recordID</code>","text":"<ul> <li>Description: Delete an existing landslide inventory record.</li> <li>Query Logic: Verify the <code>adminID</code>. If authorized, allow the admin to delete the record with <code>recordID</code>.</li> <li>Response:</li> <li>200 OK: Successfully deleted the record.     <pre><code>{\n    \"adminID\": \"adminID\",\n    \"recordID\": \"recordID\"\n}\n</code></pre></li> <li>404 Not Found: Record with <code>recordID</code> does not exist.</li> <li>409 Conflict: Admin with the <code>adminID</code> is not authorized to delete records.</li> </ul>"},{"location":"CoursesLink/","title":"Recommended Courses","text":"","tags":["CAP"]},{"location":"CoursesLink/#courese-1-devops","title":"Courese 1 : DevOps","text":"<ul> <li>Link : IBM DevOps and Software Engineering Professional Certificate</li> <li>Level : Beginner</li> </ul>","tags":["CAP"]},{"location":"CoursesLink/#courses-2-devops","title":"Courses 2 : DevOps","text":"<ul> <li> <p>Link : IBM Applied DevOps Engineering Professional Certificate</p> </li> <li> <p>Level : Beginner</p> </li> </ul>","tags":["CAP"]},{"location":"CoursesLink/#courses-3-devops","title":"Courses 3 : DevOps","text":"<ul> <li> <p>Link : YAML Fundamentals for DevOps, Cloud and IaC Engineers</p> </li> <li> <p>Level : Advanced</p> </li> </ul>","tags":["CAP"]},{"location":"CoursesLink/#courses-4-cicd","title":"Courses 4 : CICD","text":"<ul> <li> <p>Link : Deploy any MERN Stack App on Azure Cloud using CICD Pipeline</p> </li> <li> <p>Level : Beginner</p> </li> </ul>","tags":["CAP"]},{"location":"CoursesLink/#courses-5-cicd","title":"Courses 5 : CICD","text":"<ul> <li> <p>Link : Azure CICD Pipeline for ASP.Net Core Web App</p> </li> <li> <p>Level : Advanced</p> </li> </ul>","tags":["CAP"]},{"location":"CoursesLink/#courses-6-cicd","title":"Courses 6 : CICD","text":"<ul> <li> <p>Link : CICD Pipeline Construction and Implementation</p> </li> <li> <p>Level : Intermediate </p> </li> </ul>","tags":["CAP"]},{"location":"CoursesLink/#courses-7-java","title":"Courses 7 : java","text":"<ul> <li> <p>Link : Java Programming and Software Engineering Fundamentals Specialization</p> </li> <li> <p>Level : Advanced</p> </li> </ul>","tags":["CAP"]},{"location":"CoursesLink/#courses-8-java","title":"Courses 8 : java","text":"<ul> <li> <p>Link : Java FullStack Developer Specialization</p> </li> <li> <p>Level : Advanced</p> </li> </ul>","tags":["CAP"]},{"location":"CoursesLink/#courses-9-java-spring","title":"Courses 9 : java Spring","text":"<ul> <li> <p>Link : Building Cloud Services with the Java Spring Framework</p> </li> <li> <p>Level : Intermediate</p> </li> </ul>","tags":["CAP"]},{"location":"CoursesLink/#courses-10-java-spring","title":"Courses 10 : java Spring","text":"<ul> <li> <p>Link : Kafka Streams API for Developers Using Java/Spring Boot 3.X</p> </li> <li> <p>Level : Intermediate</p> </li> </ul>","tags":["CAP"]},{"location":"CoursesLink/#courses-11-java-spring","title":"Courses 11 : java Spring","text":"<ul> <li> <p>Link : Creating Restful Web Services with Java and Maven</p> </li> <li> <p>Level : Advanced</p> </li> </ul>","tags":["CAP"]},{"location":"CoursesLink/#courses-12-spring-boot","title":"Courses 12 : Spring Boot","text":"<ul> <li> <p>Link : Spring Framework Specialization</p> </li> <li> <p>Level : Intermediate</p> </li> </ul>","tags":["CAP"]},{"location":"CoursesLink/#courses-13-spring-boot","title":"Courses 13 : Spring Boot","text":"<ul> <li> <p>Link : Building Scalable Java Microservices with Spring Boot and Spring Cloud</p> </li> <li> <p>Level : Intermediate</p> </li> </ul>","tags":["CAP"]},{"location":"CoursesLink/#courses-14-spring-boot","title":"Courses 14 : Spring Boot","text":"<ul> <li> <p>Link : Spring Boot Architecture</p> </li> <li> <p>Level : Advanced</p> </li> </ul>","tags":["CAP"]},{"location":"CoursesLink/#courses-15-spring-boot","title":"Courses 15 : Spring Boot","text":"<ul> <li> <p>Link : Building Microservices with Spring Boot</p> </li> <li> <p>Level : Advanced</p> </li> </ul>","tags":["CAP"]},{"location":"CoursesLink/#courses-16-postgresql","title":"Courses 16 : Postgresql","text":"<ul> <li> <p>Link : Database Design and Basic SQL in PostgreSQL</p> </li> <li> <p>Level : Intermediate</p> </li> </ul>","tags":["CAP"]},{"location":"CoursesLink/#courses-17-postgresql","title":"Courses 17 : Postgresql","text":"<ul> <li> <p>Link : PostgreSQL for Everybody Specialization</p> </li> <li> <p>Level : Advanced</p> </li> </ul>","tags":["CAP"]},{"location":"CoursesLink/#courses-18-postgresql","title":"Courses 18 : Postgresql","text":"<ul> <li> <p>Link : SQL CASE Statements</p> </li> <li> <p>Level : Advanced</p> </li> </ul>","tags":["CAP"]},{"location":"CoursesLink/#courses-19-search-engine","title":"Courses 19 : Search Engine","text":"<ul> <li> <p>Link : Search Engine Optimization (SEO) Specialization</p> </li> <li> <p>Level : Beginner</p> </li> </ul>","tags":["CAP"]},{"location":"CoursesLink/#courses-20-search-engine","title":"Courses 20 : Search Engine","text":"<ul> <li> <p>Link : Search Engines for Web and Enterprise Data</p> </li> <li> <p>Level : Intermediate</p> </li> </ul>","tags":["CAP"]},{"location":"CoursesLink/#courses-21-search-engine","title":"Courses 21 : Search Engine","text":"<ul> <li> <p>Link : Relational Database with Go: Build an Article Search Engine</p> </li> <li> <p>Level : Intermediate</p> </li> </ul>","tags":["CAP"]},{"location":"CoursesLink/#courses-22-search-engine","title":"Courses 22 : Search Engine","text":"<ul> <li> <p>Link : Increase SEO Traffic with WordPress</p> </li> <li> <p>Level : Advanced</p> </li> </ul>","tags":["CAP"]},{"location":"CoursesLink/#courses-23-search-engine","title":"Courses 23 : Search Engine","text":"<ul> <li> <p>Link : SEO: Search Engine Optimization</p> </li> <li> <p>Level : Advanced</p> </li> </ul>","tags":["CAP"]},{"location":"GHS/","title":"My Understanding of the BRD","text":""},{"location":"GHS/#2-background","title":"2. Background","text":""},{"location":"GHS/#21-backgroud","title":"2.1 Backgroud","text":"<ul> <li>Earthquake and Geophysics division under MoENR monitors the seismic event within and outside bhutan, its main responsibility is to disseminate the eqrthquick info as soon as earthquake occurs.</li> </ul> <p>Therefore, NEMN and EIMN are stable and up-time 99.9% with accurate, reliable data for public.</p>"},{"location":"GHS/#22-objectives","title":"2.2 Objectives","text":"<ol> <li>Scalable and user-friendly system that integrates various data and diverse functionality.</li> <li>Ensure quality data and information processing which incudes <ul> <li>collectig </li> <li>Management</li> <li>Accessibility of data collected(data collection is done from thirt party division)</li> </ul> </li> </ol>"},{"location":"GHS/#22-scope","title":"2.2 Scope","text":"<ul> <li>Development of GeoHazard web portal</li> </ul>"},{"location":"GHS/#24-current-state","title":"2.4 Current State","text":"<ul> <li>No web portal for for collecting the information fromthe source and disseminating it to public.</li> </ul>"},{"location":"GHS/#25-desire-future-state","title":"2.5 Desire future state","text":"<ul> <li>Centralized database ensurig data quality </li> <li>information processing </li> <li>Data disseminating with various stakeholders and public.</li> </ul>"},{"location":"GHS/#3-functionality-requremments","title":"3. Functionality Requremments","text":""},{"location":"GHS/#31-user-authentication-and-role-based-access-control","title":"3.1. User Authentication and Role Based Access Control","text":"<ol> <li> <p>Secure Login</p> </li> <li> <p>Secure login using National Digital Identity(NDI)</p> </li> <li> <p>Verify the identity and assign role like public viewer and GHS admin.</p> </li> <li> <p>User Management</p> </li> <li> <p>Allow the Adimn to perform CRUD functionality on user.</p> </li> <li> <p>Role Mangement</p> </li> <li> <p>Allow the Adimn to perform CRUD functionality on user role.(what roles are there ?)</p> </li> <li> <p>Permission Management :</p> </li> <li> <p>System should be able to assign permission like CRUD functionality.</p> </li> <li> <p>Ensure assignign multiple permission to a role.</p> </li> </ol>"},{"location":"GHS/#32-master-data-management","title":"3.2. Master Data Management","text":"<ul> <li> <p>Validate the incoming data and accurate data dissemination.</p> </li> <li> <p>Deactivate or achiving of data without deleting the data(data needs to be in the db with a status and frontend needs to temporarly deactivater the data...... A sprcial permission need to be there to update the data status)</p> </li> <li> <p>Parent child relatonship between categories of data (doubt : categorires to be parent and data to be child under the category ??? is it ?)</p> </li> <li> <p>No redundent data storage.</p> </li> </ul>"},{"location":"OOP/","title":"Object Oriented Programing","text":""},{"location":"OOP/#class","title":"Class","text":"<p>Defination : Classs is blueprint or templet for creating a object.</p> <pre><code>class Item1:\n    pass\n</code></pre>"},{"location":"OOP/#instance-of-a-class","title":"Instance of a class","text":"<ul> <li> <p>Instance of a class is an object created from a class.</p> </li> <li> <p>In object-oriented programming, a class acts as a blueprint, and instances are the actual objects created using that blueprint.</p> </li> </ul> <pre><code>class Item1:\n    pass\n\nitem1 = Item1()\n</code></pre> <ul> <li>item1 is a instance created from class Item1.</li> </ul>"},{"location":"OOP/#attribute","title":"Attribute","text":"<ul> <li> <p>An Attribute is a piece of data that belongs to an object or a classs.</p> </li> <li> <p>It describes the property of a class or an object.</p> </li> </ul> <pre><code>class Item1:\n    pass \n\nitem1 = Item1()\nitem1.name = \"phone\"\nitem1.price = 100\nitem1.quantity = 5\n</code></pre> <ul> <li>name,price and quantity are characteristics item1 which is a instance of class Item1.</li> </ul>"},{"location":"OOP/#methods-in-class","title":"Methods in class","text":"<p>In Object-Oriented Programming (OOP), a method is a function that is defined inside a class and is associated with objects (instances) of that class. </p> <p>Method defines behaviour and action that a object of a class can perform </p> <p>syntex for a class </p> <pre><code>class ClassName:\n\n    def method_name(self, parameter1, parameter2):\n\n        return parameter1 * parameter2\n\n    # Creating a instance or object from a class \n    instanceName = method_name()\n\n    # calling the method of a instance or object\n    print (instanceName.method_name(parametersValue1, parametersValue2))\n</code></pre> <p>self inside a method is a reference to the instance of the class that is calling the method, example instanceName is the instance that is calling the methond method_name.</p> <p>Python automatically gives the method the object that called it instanceName, and this object is called self.</p>"},{"location":"OOP/#constructor","title":"Constructor","text":"<p>Constructor is a special method that is called automatically when an object is created from a class. </p> <p>its main role is to initialize the objects by setting up its attributes.</p> <ul> <li>There are two types of constructore </li> <li>new</li> <li>init</li> </ul>"},{"location":"OOP/#new-method","title":"new method","text":"<ul> <li> <p>new method id responsible for creating a new instance of a class.</p> </li> <li> <p>it allocates memory and returns the new instance or object.</p> </li> <li> <p>it is called before init method.</p> </li> <li> <p>Self parameter in a constructor referes to the instance created followed by parameters that are needed for initializing the object.</p> </li> </ul>"},{"location":"OOP/#init-method","title":"init method","text":"<ul> <li>init method initializer that sets up the instances's attribute after creation.</li> </ul> <p>How to add attribute to a instance through init method??</p> <pre><code>class Car:\n\n    # dynamically seting up the attribute(name and model) to a instance \n    def __init__(self, name, model):\n        self.name = name\n        self.model = model\n\n# creating a instance with attribute name= \"toyata\" and model = 2020\ncar = Car(\"Toyata\",2020)\n\n# calling the instance\nprint(car.name)\n</code></pre> <p>How to validate the arguments received in a constructor</p>"},{"location":"OOP/#assert-is-uesd-to-validate-the-arguments","title":"<code>assert</code> is uesd to validate the arguments","text":"<pre><code>class Item1:\n\n    def __init__(self,name: str, price: float,quantity: float):\n\n        # Validating the arguments provided to a instance\n        assert price &gt;= 0, f\"Price {price} should be greater than ot equal to zero\"\n        assert quantity &gt;= 0, f\"Quantity {quantity} should be greater than ot equal to zero\"\n\n        # Dynamically assigning the argument to a instance\n        self.name = name \n        self.price = price\n        self.quantity = quantity\n\n    def Calculate_totalPrice(self):\n        return self.price * self.quantity\n\nitem1 = Item1(\"tea\",20, 4)\nitem2 = Item1(\"momo\",30,2)\n</code></pre>"},{"location":"cyber/","title":"Cyber Security Learning","text":""},{"location":"cyber/#1-introduction-to-cyber-security","title":"1. Introduction to cyber security","text":"<p>Cybersecurity is the practice of protecting systems, networks, and programs from digital attacks. These cyberattacks are usually aimed at accessing, changing, or destroying sensitive information; extorting money from users; or interrupting normal business processes.</p>"},{"location":"cyber/#11-offensive-security","title":"1.1 Offensive Security","text":"<p>Offeensive security is a process of breakting into computer sysytem , exploiting software bugs and finding loopholes in application to gain access to unauthorized datas.</p> <p>To neat a hacker you need to think like a hacker by finding vulnerability and recommending patches before cyber crime occures.</p> <p>offensive security includes :</p> <ul> <li>Web application security (practice of protecting websites, application and API from cyber attacks)</li> <li>Network Security ( Protecting the underlying networking infrastructure from unauthorized access, misuse, malfunction, modification, destruction, or improper disclosure. it incolves creating a secure infrastructure for devices and users for smooth communication)</li> <li>Operating System Security (practice of securing operating system from cyber attacks like threats, viruses, worms, malware or remote hacker intrusions.)</li> </ul>"},{"location":"cyber/#12-defensive-security","title":"1.2 Defensive Security","text":"<p>Defensive security is a process of securing an orginazations data from cyber attacks by implementing security measures to protect the data from unauthorized access.</p> <p>Defensive security includes Check for :</p> <ul> <li>Vulnerabilities (weekness and oppertunity for cyber attacks to exploit into an organization system)</li> <li>Policy violations  (protecting acces to data of an orgination)</li> <li>Unauthorized activity (protecting data from unauthorized access)</li> <li>Network intrusions (unauthorized penetration into an computer system)</li> </ul>"},{"location":"cyber/#what-is-gobuster","title":"What is GoBuster?","text":"<p>Gobuster Tool enumerates hidden directories and files in the target domain by performing a brute-force attack.</p> <p><pre><code>gobuster -h \n</code></pre> For listing all the gobuster commands avalible in the tool.</p>"},{"location":"cyber/#gobuster-dir-directory-enumeration-mode","title":"Gobuster DIR (Directory Enumeration Mode)","text":"<p>DIR commands in gobuster is used to enumerate directories and files in the target domain.</p>"},{"location":"cyber/#common-options-for-gobuster-dir","title":"Common Options for <code>gobuster dir</code>","text":"Option Description <code>-u</code> Specifies the target URL (e.g., <code>http://example.com</code>). <code>-w</code> Specifies the wordlist file to use for brute-forcing directories/files (e.g., <code>/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt</code>). <code>-x</code> Specify file extensions to search for (e.g., <code>.php</code>, <code>.html</code>). <code>-t</code> Sets the number of threads (higher values can speed up the process). <code>-o</code> Outputs results to a file (e.g., <code>results.txt</code>). <code>-s</code> Show only specific status codes (e.g., <code>200, 301</code>). <code>-b</code> Blacklist certain status codes from the output (e.g., <code>403</code>). <code>-r</code> Follow redirects. <code>-k</code> Skip SSL certificate verification (useful for self-signed certs). <code>-q</code> Enable \"quiet\" mode (show fewer messages)."},{"location":"discussion/","title":"Capstone Discussion - 30th December","text":"","tags":["Capstone"]},{"location":"discussion/#agenda","title":"Agenda","text":"<p>This discussion will cover the progress, ongoing tasks, and upcoming work related to the capstone project. Key areas include database schema design, API implementation, and challenges in the current workflow.</p>","tags":["Capstone"]},{"location":"discussion/#work-completed","title":"Work Completed","text":"<ol> <li>Database Schema Design </li> <li> <p>Created and finalized schema based on project requirements.</p> </li> <li> <p>API Endpoint Design </p> </li> <li> <p>Defined and structured endpoints for seamless integration.</p> </li> <li> <p>Implementation of API Endpoints </p> </li> <li> <p>Developed and tested API endpoints to ensure functionality.</p> </li> <li> <p>Corrected Supervisor Recommendations:  </p> </li> <li>Edge Case: Adjusted logic to handle product price changes in the <code>orderItems</code> table. </li> <li>GitHub Repo Link </li> <li>Order Status: Updated <code>orderStatus</code> datatype to <code>ENUM</code> and introduced new statuses.</li> <li>orderStatus.md</li> </ol>","tags":["Capstone"]},{"location":"discussion/#work-in-progress","title":"Work in Progress","text":"<ol> <li>Frontend Reference Design </li> <li>Creating Figma designs for frontend layout and features.</li> <li> <p>Figma Link</p> </li> <li> <p>Authentication Integration </p> </li> <li>Setting up authentication flow using Auth0.</li> </ol>","tags":["Capstone"]},{"location":"discussion/#work-to-be-completed","title":"Work to be Completed","text":"<ol> <li>Frontend Implementation </li> <li> <p>Develop the frontend based on Figma designs.</p> </li> <li> <p>Auth0 Functionality </p> </li> <li> <p>Integrate Auth0 into the existing backend and frontend workflows.</p> </li> <li> <p>Protected Routes </p> </li> <li> <p>Secure specific routes for authorized users only.</p> </li> <li> <p>Cloud Storage Integration </p> </li> <li> <p>Store images in cloud storage to improve performance and accessibility.</p> </li> <li> <p>Payment Gateway Implementation </p> </li> <li>Set up and configure a payment gateway for transaction processing.</li> </ol>","tags":["Capstone"]},{"location":"discussion/#points-for-discussion","title":"Points for Discussion","text":"<ol> <li>Order Items Table:  </li> <li> <p>Cross-check the implementation, focusing on how edge cases (e.g., product price changes) are handled.</p> </li> <li> <p>Manually Added Products:  </p> </li> <li> <p>Discuss how to manage products manually added to the <code>orderItems</code> table by the store owner.</p> </li> <li> <p>Order Status Updates:  </p> </li> <li> <p>When to update the <code>orderStatus</code> in the <code>order</code> table.</p> </li> <li> <p>Payment Gateway:  </p> </li> <li>Explore potential solutions and strategies for integrating the payment gateway effectively.</li> </ol>","tags":["Capstone"]},{"location":"orderStatus/","title":"Order Status","text":"<p>In the context of ecommerce, delivery status is the current state or position of a customer\u2019s order as it goes through the delivery process. It indicates where the order is in the dilivery process, whether it is still being processed, has been dispatched, or has been delivered.</p>","tags":["CAP"]},{"location":"orderStatus/#different-types-of-order-status","title":"Different types of order status","text":"<p>Reference link for order status</p> <p>API Endpoint Design Github Repo Link</p> <ol> <li> <p>Order Placed: The order has been succesfully placed by the customer and order has been registerd at the merchant's system.</p> </li> <li> <p>Order Confirmed: Process where the merchant verifies and confirms the order after receiving payment.</p> <ul> <li>Send an email to the customer confirming the order and providing details like </li> <li>Order number</li> <li>Estimated delivery date</li> <li>Delivery address</li> <li>Payment details</li> <li>Customer information(name) </li> </ul> </li> <li>Order Processing: The order is being processed by the merchant. <ul> <li>The merchant will pick the items from the warehouse and pack them for shipping.</li> </ul> </li> <li> <p>Shipped/Dispatched: The delivery service now has the order.(Removed)</p> </li> <li> <p>In transit: The order is on its way to the customer.</p> </li> <li> <p>Delivered: The customer's address has successfully received the package</p> </li> <li> <p>Canceled: The order has been canceled by the customer or the merchant due to various reasons.(Customer changed mind, payment issues)</p> </li> <li> <p>Returned: The order has been returned by the customer due to various reasons like damaged product, wrong product, etc.</p> </li> <li> <p>Refunded: The order has been refunded to the customer due to various reasons like damaged product, wrong product, etc.</p> </li> </ol>","tags":["CAP"]},{"location":"reference/","title":"MKDocs Guide","text":""},{"location":"reference/#highlight-the-code","title":"Highlight the code","text":"<p>Example :</p> <p>This is a <code>code</code>.</p>"},{"location":"reference/#plain-code-block","title":"Plain code block","text":"<p>Example :</p> <pre><code>print(\"hellow\")\n</code></pre>"},{"location":"reference/#code-for-specific-language","title":"Code for specific language","text":"<p>Example lets take python3 code :</p> <pre><code>num = 23\nprint(num)\n</code></pre>"},{"location":"reference/#with-a-title","title":"With a title","text":"bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"reference/#with-line-numbers","title":"With line numbers","text":"<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"reference/#highlighting-lines","title":"Highlighting lines","text":"<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"Internship_Blog/internWeek1/","title":"Week 1 (16/09/2024 - 21/09/2024)","text":"","tags":["IDE202"]},{"location":"Internship_Blog/internWeek1/#introduction","title":"\ud83c\udf1f Introduction","text":"<p>Hi! My name is Chimi Gyeltshen, and I am currently working as a Software Developer at iBEST Institute with the iBEST Technologies team from 16/09/2024 to 28/02/2025.</p> <p>Under the guidance of the Director of Technology, I have been tasked with assisting my friend Yonten, who is developing a prototype for iBEST Institute.</p>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek1/#highlights","title":"\ud83d\ude80 Highlights","text":"<ol> <li> <p>Added two new pages: Contact Us and About Us.</p> </li> <li> <p>Implemented scroll animations on the home page.</p> </li> <li> <p>Read Introduction to Algorithms by Thomas H. Cormen.</p> </li> <li> <p>Improved the Figma design and consulted with the Director three times.</p> </li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek1/#learning-experience","title":"\ud83d\udcda Learning Experience","text":"<ol> <li> <p>Mastered vertical and horizontal animations in Figma.</p> </li> <li> <p>Learned a new algorithm: the Divide and Conquer Algorithm.</p> </li> <li> <p>Familiarized myself with the open-source library TanStack Query (formerly known as React Query) for efficient data fetching and state management.</p> </li> <li> <p>Understood how to use queries and mutations in a React application. You can view the project here: GitHub Repository.</p> </li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek1/#industry-insights","title":"\ud83d\udca1 Industry Insights","text":"<p>After starting my internship, I realized that being a software developer involves mastering multiple languages and frameworks. At iBEST, the backend is built with Go, while the frontend utilizes React and Flutter for state management.</p>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek1/#challenges","title":"\u26a0\ufe0f Challenges","text":"<ul> <li> <p>Understanding how frames and components work when creating animations in Figma.</p> </li> <li> <p>Finding the right UI design for reference.</p> </li> <li> <p>Grasping and implementing queries and mutations in React.</p> </li> </ul>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek1/#next-weeks-plan","title":"\ud83c\udfaf Next Week's Plan","text":"<ul> <li> <p>Improve the UI components and give the prototype a formal look.</p> </li> <li> <p>Continue reading and deepening my understanding of Introduction to Algorithms.</p> </li> </ul> <p>Looking forward to next week's progress and further insights into full-stack development! \ud83d\udcbb\ud83d\ude80</p>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek2/","title":"Week 2 (22/09/2024 - 28/09/2024)","text":"","tags":["IDE202"]},{"location":"Internship_Blog/internWeek2/#introduction","title":"\ud83c\udf1f Introduction","text":"<p>Welcome to the second week of my internship with Chimi. This week was quite an unusual experience as I adapted to a more formal industrial environment. It was both funny and enjoyable playing the role of an office-going professional. </p> <p>Throughout the week, we enhanced the user experience by adding more animations and redesigned the services page with a more intuitive design. We also had the privilege of receiving insights from our Director on UI design, Docker, hexadecimal values, and the text-based web browser, Lynx.</p>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek2/#highlights","title":"\ud83d\ude80 Highlights","text":"<ol> <li> <p>Added animations to the homepage, including a new card highlighting available courses at the iBEST Institute, which redirects users to the services page for more information.  </p> </li> <li> <p>Updated the services page with a clickable table displaying all available courses. Clicking on a course brings up its details on the same page.</p> </li> <li> <p>Revised the color scheme and icons to give the institute's website a more formal and professional appearance.</p> </li> <li> <p>Presented our UI design to the Director and made the necessary updates based on his feedback.</p> </li> <li> <p>Initialized a personal backend project for a chat application using the Phoenix Framework. GitHub Repository</p> </li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek2/#learning-experience","title":"\ud83d\udcda Learning Experience","text":"<ul> <li> <p>Gained a deeper understanding of the importance of color combinations and typography in UI design.</p> </li> <li> <p>Learned how human psychology affects the perception of visual elements, especially the impact of drop shadows and border-radius on components.</p> </li> <li> <p>Familiarized myself with the text-based web browser Lynx, learning installation and basic usage.  </p> </li> <li> <p>Explored the Phoenix Framework for server-side authentication, routing, and serving data to the client in formats like HTML and JSON. GitHub Repository (Personal)</p> </li> </ul>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek2/#industry-insights","title":"\ud83d\udca1 Industry Insights","text":"<p>By the end of this week, I realized that creating a user-friendly prototype design is crucial for any project. It serves as a blueprint for all subsequent work, ensuring that everyone involved is aligned with the overall vision of the project.</p>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek2/#challenges","title":"\u26a0\ufe0f Challenges","text":"<ul> <li> <p>Understanding the right color combinations and finding suitable UI design references.</p> </li> <li> <p>Finding good resources for studying the Phoenix Framework, particularly for routing and handling POST requests.</p> </li> </ul>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek2/#next-weeks-plan","title":"\ud83c\udfaf Next Week's Plan","text":"<ul> <li> <p>Start designing the UI for tablet view.</p> </li> <li> <p>Complete authentication for the chat application (Personal).</p> </li> </ul> <p>This week was a mix of design enhancements, learning, and backend development exploration, and I\u2019m excited to continue building and growing! \ud83d\udcbb\u2728</p>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek3/","title":"Week 3 (28/09/2024 - 06/10/2024)","text":"","tags":["IDE202"]},{"location":"Internship_Blog/internWeek3/#introduction","title":"\ud83c\udf1f Introduction","text":"<p>Welcome, everyone! It's the third week of my internship, and it\u2019s been a productive time here at iBEST, working alongside knowledgeable employees. This week, we completed the prototype for the mobile and tablet views of the iBEST Institute website, which the clients approved. Additionally, I\u2019ve been working on designing the schema for cocoCommercial, a website builder I proposed for my capstone project in the third semester.</p>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek3/#highlights","title":"\ud83d\ude80 Highlights","text":"<ol> <li> <p>Studied UI design and its implementation, focusing on creating UI components like cards using concepts from Material Design.</p> </li> <li> <p>Successfully redesigned the Courses subpage under the Services section, applying the card design concept I learned.</p> </li> <li> <p>Started using TryHackMe, an online platform for learning cybersecurity. I installed VM Fusion for Kali Linux and am excited to dive deeper into this field.</p> </li> <li> <p>Completed the Maximum Subarray Problem under the Divide and Conquer Algorithm, which is similar to the Best Time to Buy and Sell Stock problem on LeetCode. It was intriguing to explore multiple approaches for solving and analyzing this problem. (Personal Achievement)</p> </li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek3/#learning-experience","title":"\ud83d\udcda Learning Experience","text":"<ol> <li> <p>Began studying Object-Oriented Programming through FreeCodeCamp on YouTube, with plans to apply it in future AI projects.</p> </li> <li> <p>Started reading Docker documentation, with the intention of using Docker in my capstone project.</p> </li> <li> <p>Learned about Database Multi-Tenancy, a method for efficiently sharing a single database among multiple merchants \u2014 specifically shop owners in my capstone project.</p> </li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek3/#industry-insights","title":"\ud83d\udca1 Industry Insights","text":"<ol> <li> <p>I realized that different tools are suited for different tasks. Initially, I thought React and Next.js could handle all frontend development, but that\u2019s not always the case.</p> </li> <li> <p>When building new projects, it\u2019s important to understand three key steps:</p> </li> <li> <p>Leverage open-source resources to gain reference and clarity on what you want to implement.</p> </li> <li> <p>List the data that needs to be stored in data-centric projects and decide how to store it.</p> </li> <li> <p>After deciding what and how to store the data, cross-check that the database schema supports the features you plan to implement.</p> </li> <li> <p>Create a prototype to serve as a reference while building the frontend.</p> </li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek3/#challenges","title":"\u26a0\ufe0f Challenges","text":"<ol> <li> <p>Understanding color combinations for UI design.</p> </li> <li> <p>Finding the right resources for designing the database schema for the capstone project.</p> </li> <li> <p>Listing data to store, determining which tables to create, and mapping relationships between them.</p> </li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek3/#next-weeks-plan","title":"\ud83c\udfaf Next Week's Plan","text":"<ul> <li> <p>Complete the desktop prototype design by Wednesday.</p> </li> <li> <p>Conduct a group meeting for the capstone project to cross-check whether the database schema aligns with the required features.</p> </li> <li> <p>Study third-party authentication and attempt to implement Docker for the capstone project.</p> </li> </ul> <p>This week was packed with design updates, learning, and backend work, and I\u2019m excited to tackle more challenges next week! \ud83d\udcbb\ud83d\ude80</p>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek4/","title":"Week 4 (07/10/2024 - 13/10/2024)","text":"","tags":["IDE202"]},{"location":"Internship_Blog/internWeek4/#introduction","title":"\ud83c\udf1f Introduction","text":"<p>Welcome to the fourth week of my internship with Chimi. After designing the desktop prototype for the iBEST Institute website, we started implementing the UI design using React and Next.js. Additionally, I began working on the backend for the cocoCommercial website, focusing on the database schema and user authentication. This week offered a well-rounded blend of frontend and backend development.</p>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek4/#highlights","title":"\ud83d\ude80 Highlights","text":"<ol> <li> <p>Completed the desktop prototype design for the iBEST Institute website, incorporating feedback from clients and the Director. The design was approved, and we started implementation using React and Next.js. GitHub</p> </li> <li> <p>Created reusable components like the navbar and footer using ShadcnUI. Completed the homepage and Contact Us page, and we're exploring the integration of Mapbox for the Contact Us section.</p> </li> <li> <p>Finished the schema design for the cocoCommercial website and prepared wireframes for my group members to start working on the prototype.</p> </li> <li> <p>Installed VM Fusion for Kali Linux and started learning cybersecurity through TryHackMe.</p> </li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek4/#learning-experience","title":"\ud83d\udcda Learning Experience","text":"<ol> <li> <p>Tailwind CSS Animations: Learned the importance of caution when adding animations with Tailwind CSS as it can affect the site's overall performance.</p> </li> <li> <p>Reusable Components in React: Understood the importance of creating reusable components in React to maintain consistency and reduce redundancy.</p> </li> <li> <p>Cybersecurity Basics: Started learning cybersecurity via TryHackMe. Focused on offensive learning, discovering tools like gobuster and mastering DIR commands for web server directory enumeration.</p> </li> <li> <p>Git Collaboration: Gained practical experience working as a Git collaborator\u2014pushing, pulling changes, and resolving merge conflicts.</p> </li> <li> <p>Tailwind CSS Customization: Learned how to add custom colors, backgrounds, and fonts to the Tailwind CSS config file.</p> </li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek4/#industry-insights","title":"\ud83d\udca1 Industry Insights","text":"<ol> <li> <p>Effective Teamwork: Collaboration requires effective communication and coordination, especially when working on the same project. Understanding how to use Git proficiently is essential.</p> </li> <li> <p>Branch Management: Every Git collaborator should create feature branches and merge them into the main branch only after thorough testing. I learned the significance of this practice during the week.</p> </li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek4/#challenges","title":"\u26a0\ufe0f Challenges","text":"<ol> <li> <p>Grasping how to use gobuster and DIR commands for directory enumeration on a web server was a challenging task but an essential learning curve.</p> </li> <li> <p>Mapping the database schema with the features we want to implement on the cocoCommercial website was tricky and required some in-depth analysis.</p> </li> <li> <p>Combining ShadcnUI components to create new, more complex components tested my UI design understanding.</p> </li> <li> <p>Understanding error messages and mastering shortcut keys in Kali Linux proved challenging but rewarding.</p> </li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek4/#next-weeks-plan","title":"\ud83c\udfaf Next Week's Plan","text":"<ol> <li> <p>Complete the implementation of the iBEST Institute website using React and Next.js.</p> </li> <li> <p>Start learning Android development and begin work on the cocoCommercial website.</p> </li> <li> <p>Configure a shared database for the cocoCommercial website.</p> </li> <li> <p>Finish all TryHackMe learning modules, especially the ones related to basic cybersecurity.</p> </li> </ol> <p>Stay tuned for more updates next week as I dive deeper into full-stack development and cybersecurity! \ud83d\udcbb\ud83d\udd10</p>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek5/","title":"Week 5 (13/10/2024 - 19/10/2024)","text":"","tags":["IDE202"]},{"location":"Internship_Blog/internWeek5/#introduction","title":"\ud83c\udf1f Introduction","text":"<p>Welcome back, readers! This is my fifth week of the internship, and my friend and I have finally finished coding the website for iBEST Institute. It was a great time to dive into other exciting topics, especially something as fascinating as Cyber Security. Alongside that, I'm starting to learn Android Development to enhance my personal knowledge in web development, with the help of a new Android developer from Bangladesh who recently joined iBEST.</p>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek5/#highlights","title":"\ud83d\ude80 Highlights","text":"<ol> <li> <p>Completed the coding part for iBEST Institute using Next.js, Shadcn UI, and the project is available on GitHub.</p> </li> <li> <p>Created a TryHackMe account and completed 4 rooms with many interesting tools that ethical hackers use to test and attack hosts.</p> </li> <li> <p>Got access to Udemy Academy to start learning Android Development. I aim to be proficient in Android development by the end of the course.</p> </li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek5/#learning-experience","title":"\ud83d\udcda Learning Experience","text":"<ol> <li> <p>Improved responsiveness using Tailwind CSS.</p> </li> <li> <p>With the completion of basic pentesting, I learned how to think and plan like a hacker rather than just expecting an output after running commands. Before extracting critical credentials from a host, it's essential to:</p> </li> <li>Check if the host is up by pinging the network.</li> <li>Search for all available ports.</li> <li>Identify which ports to target.</li> <li>Use tools like nmap for network mapping, gobuster, dirbuster, and ffuf to brute-force and enumerate hidden directories of the target URL.</li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek5/#industry-insights","title":"\ud83d\udca1 Industry Insights","text":"<ol> <li> <p>As learners, we need to take responsibility for our learning and make time for self-study.</p> </li> <li> <p>Before starting a project, it's crucial to:</p> </li> <li>Create a Product Backlog: a prioritized list of all functionalities the team needs to implement.</li> <li> <p>Identify a Sprint Backlog: select items from the product backlog that the team will work on during a sprint and estimate the time required.</p> </li> <li> <p>Scrum is an agile project management framework that helps teams manage their work through a set of values, principles, and practices.</p> </li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek5/#challenges","title":"\u26a0\ufe0f Challenges","text":"<ol> <li> <p>Understanding error messages while gathering information about the target host.</p> </li> <li> <p>Grasping nmap commands and learning about the target host's infrastructure.</p> </li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek5/#next-weeks-plan","title":"\ud83c\udfaf Next Week's Plan","text":"<ol> <li> <p>Complete the iBEST Institute website using React and Next.js.</p> </li> <li> <p>Continue learning Android development.</p> </li> <li> <p>Improve my understanding of and ability to perform basic pentesting.</p> </li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek6/","title":"Week 6 (19/10/2024 - 27/10/2024)","text":"","tags":["IDE202"]},{"location":"Internship_Blog/internWeek6/#introduction","title":"\ud83c\udf1f Introduction","text":"<p>Welcome to my blog! In this post, I\u2019ll share my experiences from the sixth week of my internship. This week has been the best so far as I had the opportunity to explore Amazon Cloud Services, something I\u2019ve always dreamed of learning. Additionally, I started my Udemy course on Android Jetpack Compose, which I\u2019m really excited about. All of this was possible thanks to my mentor, Sonam Sir, who generously provided an AWS EC2 instance for me to learn and explore.</p>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek6/#highlights","title":"\ud83d\ude80 Highlights","text":"<ol> <li>Deployed a Next.js app on an AWS EC2 instance and managed the instances.</li> <li>Exported static pages from Next.js and deployed them on AWS S3.</li> <li>Installed Android Studio and began learning Android Jetpack Compose on Udemy.</li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek6/#learning-experience","title":"\ud83d\udcda Learning Experience","text":"<ol> <li>Learned the SCRUM methodology\u2014breaking work into small pieces, with continuous experimentation and feedback loops to improve as a team.</li> <li>Exported static pages from Next.js and deployed them on AWS S3.</li> <li>Gained knowledge on how to manage AWS EC2 instances and deploy a Next.js app.</li> <li>Learned about Nmap: host discovery, port scanning, port scanning techniques, and OS detection.</li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek6/#industry-insights","title":"\ud83d\udca1 Industry Insights","text":"<ol> <li>AWS EC2: A web service providing secure, resizable compute capacity in the cloud, designed to make cloud computing easier for developers.</li> <li>AWS S3: A cloud storage service offering industry-leading scalability, data availability, security, and performance.</li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek6/#challenges","title":"\u26a0\ufe0f Challenges","text":"<ol> <li>Understanding and managing AWS EC2 instances.</li> <li>Exporting static pages from Next.js and deploying them on AWS S3.</li> <li>Understanding port states such as open, closed, filtered, and unfiltered, and investigating the reasons for receiving a filtered port state.</li> <li>Installing Docker Desktop and troubleshooting errors during installation.</li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek6/#next-weeks-plan","title":"\ud83c\udfaf Next Week's Plan","text":"<ol> <li>Understanding and implementing self-hosting for Next.js using a Node.js server.</li> <li>Continuing to learn and explore Android Jetpack Compose through Udemy.</li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek7/","title":"Week 7 (27/10/2024 - 02/11/2024)","text":"","tags":["IDE202"]},{"location":"Internship_Blog/internWeek7/#introduction","title":"\ud83c\udf1f Introduction","text":"<p>Welcome, everyone! It\u2019s the seventh week of my internship at iBEST Institute. My friend and I have completed the desktop version of the iBEST Institute website using Next.js and Tailwind CSS. The website was initially responsive, as Tailwind CSS uses responsive measurement units like <code>rem</code>, <code>em</code>, <code>vh</code>, <code>vw</code>, etc. However, we want it to look perfect across all devices, so we started refining the responsiveness for mobile, tablet, and desktop views.</p>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek7/#highlights","title":"\ud83d\ude80 Highlights","text":"<ol> <li>Completed the iBEST Institute website for desktop.</li> <li>Started optimizing the website's responsiveness by analyzing key breakpoints.</li> <li>Created a custom navbar that appears at the bottom of the screen when the website is viewed on mobile devices.</li> <li>Implemented a grid layout to enhance responsiveness.</li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek7/#learning-experience","title":"\ud83d\udcda Learning Experience","text":"<ol> <li>We made the mistake of designing the desktop view first and then trying to make it responsive for mobile and tablet. We realized it would have been more efficient to start with a mobile-first approach.</li> <li>Gained an understanding of crucial breakpoints for mobile and tablet views.</li> <li>Developed the mobile view, identified the tablet breakpoint, and then designed the tablet view accordingly.</li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek7/#industry-insights","title":"\ud83d\udca1 Industry Insights","text":"<ol> <li>Responsive Design: A responsive design adapts to the user's screen size, ensuring the website looks good on all devices, including desktops, laptops, tablets, and smartphones.</li> <li>Breakpoints: Breakpoints are specific points where a website\u2019s layout changes to accommodate different screen sizes, ensuring an optimal appearance on any device.</li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek7/#challenges","title":"\u26a0\ufe0f Challenges","text":"<ol> <li>Determining how to make the website responsive after starting with the desktop view.</li> <li>Adding a custom navbar for mobile view.</li> <li>Implementing a grid layout for mobile view.</li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek7/#next-weeks-plan","title":"\ud83c\udfaf Next Week's Plan","text":"<ol> <li>Finalize the website\u2019s responsiveness for mobile and tablet views.</li> <li>Deploy the website on free platforms like Render and Netlify, and refine it to make it visually appealing.</li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek8/","title":"Week 8 (02/11/2024 - 09/11/2024)","text":"","tags":["IDE202"]},{"location":"Internship_Blog/internWeek8/#introduction","title":"\ud83c\udf1f Introduction","text":"<p>Welcome to Week 8! This was a very productive week as my friend and I finally completed the iBEST Institute website and deployed it on a free hosting platform called Render. Additionally, I resumed my Android development course on Udemy, where I\u2019m learning a lot of new things and am excited to dive deeper.</p>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek8/#highlights","title":"\ud83d\ude80 Highlights","text":"<ol> <li>Completed the iBEST Institute website with a fully responsive design.</li> <li>Deployed the website on Render.</li> <li>Resumed my Android development course on Udemy.</li> <li>Progressed in Python on CodeDex, reaching Level 3 with a total of 21 exercises completed and 1 full project done.</li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek8/#learning-experience","title":"\ud83d\udcda Learning Experience","text":"<ul> <li>Learned how to deploy a website on the latest version of Render.</li> <li>Gained troubleshooting skills for issues encountered during deployment.</li> </ul>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek8/#industry-insights","title":"\ud83d\udca1 Industry Insights","text":"<ol> <li>When building an application, ensure that it requires minimal memory usage and is efficient. This involves removing redundant code and static files to optimize performance.</li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek8/#challenges","title":"\u26a0\ufe0f Challenges","text":"<ul> <li>Staying fully focused on Android development.</li> </ul>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek8/#next-weeks-plan","title":"\ud83c\udfaf Next Week's Plan","text":"<ol> <li>Continue with the Android development course on Udemy.</li> <li>Start a new project to apply the concepts I\u2019ve learned in Android development.</li> <li>Explore advanced features in Python on CodeDex.</li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek9/","title":"Week 9 (09/11/2024 - 16/11/2024)","text":"","tags":["IDE202"]},{"location":"Internship_Blog/internWeek9/#introduction","title":"\ud83c\udf1f Introduction","text":"<p>Welcome to the 9th week of my internship! It was a good week with lots of learning. I gained a lot of knowledge through self-studies, and the satisfaction you get after accomplishing something, along with receiving positive comments from people you respect, is the best feeling ever. I am really happy with the progress I made this week and am looking forward to the next.</p>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek9/#highlights","title":"\ud83d\ude80 Highlights","text":"<ol> <li>Completed the iBEST Institute website with a fully responsive design.</li> <li>Finished the API endpoint design for the cocoCommercial capstone project API Endpoint Design.</li> <li>Resumed my Android development course on Udemy.</li> <li>Resumed my cybersecurity course on TryHackMe.</li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek9/#learning-experience","title":"\ud83d\udcda Learning Experience","text":"<ul> <li>Learned the important components of system design and how to design API endpoints.</li> <li>Gained knowledge about Auth0 and how to implement it in a project.</li> <li>Understood the implementation of server-side pagination.</li> </ul>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek9/#industry-insights","title":"\ud83d\udca1 Industry Insights","text":"<ol> <li>During system design and API endpoint design, it is crucial to document all possible scenarios and edge cases for future reference.</li> <li>Implementing server-side pagination is essential to reduce server load and improve application performance.</li> </ol>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek9/#challenges","title":"\u26a0\ufe0f Challenges","text":"<ul> <li>Understanding the basics and implementation of API endpoint design.</li> <li>Implementing server-side pagination.</li> <li>Using Auth0 in a project.</li> <li>Understanding Android Jetpack Compose.</li> </ul>","tags":["IDE202"]},{"location":"Internship_Blog/internWeek9/#next-weeks-plan","title":"\ud83c\udfaf Next Week's Plan","text":"<ol> <li>Continue with the Android development course on Udemy.</li> <li>Complete the basics of networking and penetration testing on TryHackMe.</li> </ol>","tags":["IDE202"]},{"location":"freeCodeCamp/intro_linux/nevigation_file/","title":"File Nevigation in Linux commands","text":"<ol> <li>pwd - Print Working Directory <pre><code>pwd\n</code></pre></li> <li>cd - change directory </li> </ol> <p><pre><code>cd /path/to/directory\n</code></pre> 3. ls - list directory contents</p> <p><pre><code>ls\n</code></pre> 4. mkdir [folder name] - make directory <pre><code>mkdir [folder_name]\n</code></pre> 5. rmdir [folder name] - remove directory <pre><code>rmdir [folder_name]\n</code></pre></p> <ol> <li> <p>touch [file name] - create a file <pre><code>touch [file_name.txt]\n</code></pre></p> </li> <li> <p>ls -la - list all files including hidden files <pre><code>ls -la\n\ntotal 116\ndrwx------ 15 chimi chimi  4096 Oct 24 14:59 .\ndrwxr-xr-x  3 root  root   4096 Oct 10 23:56 ..\n-rw-r--r--  1 chimi chimi   220 Oct 10 23:56 .bash_logout\n-rw-r--r--  1 chimi chimi  5551 Oct 10 23:56 .bashrc\n-rw-r--r--  1 chimi chimi  3526 Oct 10 23:56 .bashrc.original\ndrwx------ 10 chimi chimi  4096 Oct 11 00:05 .cache\ndrwxr-xr-x 15 chimi chimi  4096 Oct 11 10:27 .config\n-rw-r--r--  1 chimi chimi 11759 Oct 10 23:56 .face\nlrwxrwxrwx  1 chimi chimi     5 Oct 10 23:56 .face.icon -&gt; .face\ndrwxr-xr-x  4 chimi chimi  4096 Oct 15 10:30 .java\ndrwxr-xr-x  4 chimi chimi  4096 Oct 10 23:58 .local\ndrwx------  4 chimi chimi  4096 Oct 11 00:01 .mozilla\n-rw-r--r--  1 chimi chimi   807 Oct 10 23:56 .profile\n-rw-r--r--  1 chimi chimi     0 Oct 12 21:12 .sudo_as_admin_successful\n-rw-------  1 chimi chimi  9572 Oct 21 14:51 .zsh_history\n-rw-r--r--  1 chimi chimi 10868 Oct 10 23:56 .zshrc\ndrwxr-xr-x  2 chimi chimi  4096 Oct 21 10:14 Desktop\ndrwxr-xr-x  2 chimi chimi  4096 Oct 10 23:58 Documents\ndrwxr-xr-x  3 chimi chimi  4096 Oct 24 14:09 Downloads\ndrwxr-xr-x  2 chimi chimi  4096 Oct 10 23:58 Music\ndrwxr-xr-x  3 chimi chimi  4096 Oct 21 13:37 Pictures\ndrwxr-xr-x  2 chimi chimi  4096 Oct 10 23:58 Public\ndrwxr-xr-x  2 chimi chimi  4096 Oct 10 23:58 Templates\ndrwxr-xr-x  2 chimi chimi  4096 Oct 10 23:58 Videos\n-rw-rw-r--  1 chimi chimi     0 Oct 24 14:59 new.txt\n</code></pre></p> </li> <li>Everything starting with d  [from drwxr-xr-x] are directory.</li> <li> <p>Everything starting with - [from -rw-r--r--] are files.</p> </li> <li> <p>Copy a file and past to new location</p> </li> </ol> <pre><code>cp [file_name.extension] [new_location]\n\ncp new.txt /home/user/new.txt\n</code></pre> <ol> <li>Move a file to new location</li> </ol> <pre><code>mv [file_name.extension] [new_location]\n\nmv new.txt /Desktop/new.txt\n</code></pre> <ol> <li>locate a file in sysytem</li> </ol> <pre><code>locate file_name.extension\n</code></pre> <ol> <li>cat - concatenate and display the content of file</li> </ol> <pre><code>cat file_name.extension\n</code></pre>"},{"location":"freeCodeCamp/intro_linux/nevigation_file/#network-commands","title":"Network Commands","text":"<ul> <li>ifconfig - display network interface configuration like IP address, MAC address etc.</li> </ul> <pre><code>ifconfig\n</code></pre> <ul> <li>ping - check the network connectivity between two devices</li> </ul> <p><pre><code>ping [IP address]\n</code></pre> ping once</p> <pre><code>ping -c 1 [IP address]\n</code></pre> <ul> <li> <p>arp -a - associating ip address with MAC address</p> </li> <li> <p>netstat - display network connections, ports, routing tables, interface statistics, masquerade connections, and multicast memberships</p> </li> <li> <p>history - display the history of commands</p> </li> <li> <p>Save the ping results to ping.txt file</p> </li> </ul> <p><pre><code>ping -c 5 10.10.10.180 &gt; ping.txt\n</code></pre> result will be saved in ping.txt file</p> <ul> <li>view the content of ping.txt file</li> </ul> <pre><code>cat ping.txt\n\nPING 192.168.56.129 (192.168.56.129) 56(84) bytes of data.\n64 bytes from 192.168.56.129: icmp_seq=1 ttl=64 time=0.050 ms\n64 bytes from 192.168.56.129: icmp_seq=2 ttl=64 time=0.062 ms\n64 bytes from 192.168.56.129: icmp_seq=3 ttl=64 time=0.075 ms\n64 bytes from 192.168.56.129: icmp_seq=4 ttl=64 time=0.122 ms\n64 bytes from 192.168.56.129: icmp_seq=5 ttl=64 time=0.064 ms\n\n--- 192.168.56.129 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4104ms\nrtt min/avg/max/mdev = 0.050/0.074/0.122/0.025 ms\n</code></pre> <ul> <li>grap a specific line from the file like ip icmp_seq=1</li> </ul> <pre><code>cat ping.txt | grep icmp_seq=1   \n\n64 bytes from 192.168.56.129: icmp_seq=1 ttl=64 time=0.050 ms\n</code></pre>"}]}